{"version":3,"file":"ChatWidget.story.6cccfd3c.js","sources":["../../src/views/ChatWidget/constants.ts","../../src/views/ChatWidget/styled.ts","../../src/views/ChatWidget/index.tsx","../../src/views/ChatWidget/ChatWidget.story.tsx"],"sourcesContent":["export enum TurnType {\n  USER = 'user',\n  SYSTEM = 'system',\n}\n","import Bubble from '@/components/Bubble';\nimport Chat from '@/components/Chat';\nimport { styled } from '@/styles';\n\nexport const Container = styled('div', {\n  position: 'fixed',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  zIndex: 10,\n  '-webkit-font-smoothing': 'antialiased',\n\n  [`& ${Bubble.Container}`]: {\n    color: '$white',\n  },\n\n  [`& ${Chat.Container}`]: {\n    height: 800,\n  },\n\n  [`& ${Chat.Dialog}`]: {\n    flex: 1,\n  },\n\n  [`\n    & > ${Bubble.Container},\n    & > ${Chat.Container}\n  `]: {\n    position: 'absolute',\n    right: '$6',\n    bottom: '$6',\n  },\n});\n","import { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport * as R from 'remeda';\nimport { match } from 'ts-pattern';\n\nimport Bubble from '@/components/Bubble';\nimport Chat from '@/components/Chat';\nimport SystemResponse from '@/components/SystemResponse';\nimport UserResponse from '@/components/UserResponse';\n\nimport { TurnType } from './constants';\nimport { Container } from './styled';\nimport { TurnProps } from './types';\n\nexport interface ChatWidgetProps {\n  assistant: {\n    name: string;\n    description: string;\n    image: string;\n  };\n}\n\nconst ChatWidget: React.FC<ChatWidgetProps> = ({ assistant }) => {\n  const [isOpen, setOpen] = useState(false);\n  const [isRunning, setRunning] = useState(false);\n  const [turns, setTurns] = useState<TurnProps[]>([]);\n\n  const handleOpen = (): void => setOpen(true);\n  const handleMinimize = (): void => setOpen(false);\n  const handleStart = (): void => setRunning(true);\n  const handleEnd = (): void => {\n    handleMinimize();\n    setRunning(false);\n  };\n  const handleSend = (message: string): void =>\n    setTurns([\n      ...turns,\n      { type: TurnType.USER, message },\n      {\n        type: TurnType.SYSTEM,\n        image: assistant.image,\n        timestamp: new Date().toISOString(),\n        messages: [{ type: 'text', text: 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Impedit quisquam corrupti harum et, quos seq.' }],\n      },\n    ]);\n\n  return createPortal(\n    <Container>\n      {isOpen ? (\n        <Chat\n          title={assistant.name}\n          description={assistant.description}\n          image={assistant.image}\n          isRunning={isRunning}\n          onStart={handleStart}\n          onEnd={handleEnd}\n          onSend={handleSend}\n          onMinimize={handleMinimize}\n        >\n          {turns.map((turn, index) =>\n            match(turn)\n              .with({ type: TurnType.USER }, (props) => <UserResponse {...R.omit(props, ['type'])} key={index} />)\n              .with({ type: TurnType.SYSTEM }, (props) => <SystemResponse {...R.omit(props, ['type'])} key={index} />)\n              .exhaustive()\n          )}\n        </Chat>\n      ) : (\n        <Bubble svg=\"launch\" onClick={handleOpen} />\n      )}\n    </Container>,\n    document.body\n  );\n};\n\nexport default Object.assign(ChatWidget, {\n  Turn: TurnType,\n\n  Container,\n});\n","import { ComponentMeta, ComponentStory } from '@storybook/react';\n\nimport ChatWidget from '.';\n\nexport default {\n  title: 'Views/ChatWidget',\n  component: ChatWidget,\n  args: {\n    assistant: {\n      name: 'Assistant Name',\n      image: 'https://source.unsplash.com/random/72x72',\n      description: \"Voiceflow's virtual assistant is here to help.\",\n    },\n  },\n} as ComponentMeta<typeof ChatWidget>;\n\nconst Template: ComponentStory<typeof ChatWidget> = (args) => <ChatWidget {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {};\n"],"names":["TurnType","Container","styled","Bubble","Chat","ChatWidget","assistant","isOpen","setOpen","useState","isRunning","setRunning","turns","setTurns","handleOpen","handleMinimize","handleStart","handleEnd","handleSend","message","USER","SYSTEM","image","createPortal","_jsx","name","description","R","index","ChatWidget$1","ChatWidget_story","title","component","args","Template","Default","bind"],"mappings":"qkBAAY,IAAAA,GAAAA,IACVA,EAAA,KAAO,OACPA,EAAA,OAAS,SAFCA,IAAAA,GAAA,CAAA,CAAA,ECIC,MAAAC,EAAYC,EAAO,MAAO,CACrC,SAAU,QACV,IAAK,EACL,OAAQ,EACR,KAAM,EACN,MAAO,EACP,OAAQ,GACR,yBAA0B,cAE1B,CAAC,KAAKC,EAAO,aAAc,CACzB,MAAO,QACT,EAEA,CAAC,KAAKC,EAAK,aAAc,CACvB,OAAQ,GACV,EAEA,CAAC,KAAKA,EAAK,UAAW,CACpB,KAAM,CACR,EAEA,CAAC;AAAA,UACOD,EAAO;AAAA,UACPC,EAAK;AAAA,KACT,CACF,SAAU,WACV,MAAO,KACP,OAAQ,IACV,CACF,CAAC,ECXDC,EAAA,CAAA,CAA+C,UAAAC,CAAA,IAAA,CAC7C,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,QAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,QAAA,SAAA,EAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,QAAA,SAAA,CAAA,CAAA,EAEAK,EAAA,IAAAN,EAAA,EAAA,EACAO,EAAA,IAAAP,EAAA,EAAA,EACAQ,EAAA,IAAAL,EAAA,EAAA,EACAM,EAAA,IAAA,CACEF,IACAJ,EAAAA,EAAAA,CAAU,EAEZO,EAAAC,GAAAN,EAAA,CAAA,GAAAD,EAAA,CAGI,KAAAZ,EAAA,KAAiBoB,QAAAA,CAAMD,EAAAA,CACvB,KAAAnB,EAAA,OACiBqB,MAAAA,EAAAA,MACEC,UAAAA,IAAAA,KAAAA,EAAAA,YAAAA,EAFnB,SAAA,CAAA,CAIa,KAAA,OAAQ,KAAA,yGAAc,CAAA,CAAvB,CAAA,CAAA,EAIhB,OAAAC,EAAA,QAAA,aAAAC,EAAAvB,EAAA,CACE,SAAAM,EAAAiB,EAAApB,EAAA,CAEI,MAAAE,EAAA,KACmBmB,YAAAA,EAAAA,YACMC,MAAAA,EAAAA,MACNJ,UAAAA,EACjB,QAAAN,EACSA,MAAAA,EACFC,OAAAA,EACCC,WAAAA,EACIH,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,EAAAA,KAAAA,CAIF,KAAAf,EAAA,IAAiBoB,EAAAA,GAAAA,EAAAA,QAAAA,cAAAA,EAAAA,CAAqCO,GAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,EAAA,IAAAC,CAA8BA,CAAAA,CAAAA,EAAAA,KAAAA,CACpF,KAAA5B,EAAA,MAAiBqB,EAAAA,GAAAA,EAAAA,QAAAA,cAAAA,EAAAA,CAAyCM,GAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,EAAA,IAAAC,CAA8BA,CAAAA,CAAAA,EAAAA,YAAAA,CAHjG,CAAA,EAAAJ,EAAArB,EAAA,CAQH,IAAA,SAAY,QAAAW,CAAkBA,CAAAA,CAA9B,CAAA,EAAA,SAAA,IAAA,CAKP,EAEDe,EAAA,OAAA,OAAAxB,EAAA,CAAyC,KAAAL,EACjCA,UAAAA,CADiC,CAAA,icCtEzC,MAAe8B,EAAA,CACbC,MAAO,mBACPC,UAAW3B,EACX4B,KAAM,CACJ3B,UAAW,CACTmB,KAAM,iBACNH,MAAO,2CACPI,YAAa,gDAHJ,CADP,CAHO,EAYTQ,EAAwDD,GAAAT,EAACnB,EAAe4B,CAAAA,GAAAA,CAAhB,CAA9D,EAEaE,EAAUD,EAASE,KAAK,EAAd,EACvBD,EAAQF,KAAO,CAAf"}