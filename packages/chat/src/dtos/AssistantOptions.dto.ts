import { z } from 'zod';

import { PRIMARY } from '@/old-styles/color';
import { ChatPersistence, ChatPosition } from '@/types';

import { AnyExtension } from './Extension.dto';
import { createPalette } from '@/styles/colors';

const ColorPalette = z.object({
  50: z.string(),
  100: z.string(),
  200: z.string(),
  300: z.string(),
  400: z.string(),
  500: z.string(),
  600: z.string(),
  700: z.string(),
  800: z.string(),
  900: z.string(),
});

export const DEFAULT_AVATAR = 'https://cdn.voiceflow.com/assets/logo.png';

export type AssistantOptions = z.infer<typeof AssistantOptions>;
export type RawAssistantOptions = z.input<typeof AssistantOptions>;

export const AssistantOptions = z
  .object({
    // Settings under: Appearance & style
    fontFamily: z.string().default('UCity Pro'),
    palette: z.union([z.string(), ColorPalette]).default(createPalette()),
    image: z.string().default(DEFAULT_AVATAR), // Header image
    agentImage: z.string().default(DEFAULT_AVATAR),

    // Banner image & text
    banner: z.object({
      image: z.string().default(DEFAULT_AVATAR),
      header: z.string().optional(),
      description: z.string().optional(),
    }),

    // Launcher type & image
    launcher: z.object({
      image: z.string().default(DEFAULT_AVATAR),
      label: z.string().optional(),
    }),

    placeholder: z.string().default('Message...'),
    aiDisclaimer: z.object({
      enabled: z.boolean().default(true),
      text: z.string().default('Generated by AI, double-check for accuracy.'),
    }),

    // Security
    approvedDomains: z.string().optional(),
    agentDisclaimer: z.object({
      enabled: z.boolean().default(true),
      header: z.string(),
      description: z.string(),
      primaryButtonText: z.string().default('I Agree'),
      secondaryButtonText: z.string().optional(),
      secondaryButtonLink: z.string().optional(),
    }),

    title: z.string().default('Voiceflow Assistant'),
    avatar: z.string().default(DEFAULT_AVATAR),
    watermark: z.boolean().default(true),
    feedback: z.boolean().default(false),
    stylesheet: z.union([z.string(), z.string().array()]).optional(),
    persistence: z.nativeEnum(ChatPersistence).default(ChatPersistence.LOCAL_STORAGE),

    // Settings under: Interface & modality
    position: z.nativeEnum(ChatPosition).default(ChatPosition.RIGHT),
    spacing: z
      .object({
        side: z.number().default(30), // px
        bottom: z.number().default(30), // px
      })
      .default({}),
    audioInterface: z.boolean().default(false), // Voice input
    defaultAudioOutput: z.boolean().optional(), // Voice output

    extensions: AnyExtension.array().default([]),
  })
  .default({});
