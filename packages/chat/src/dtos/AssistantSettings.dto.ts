//
// The new Assistant Settings object
//

import { z } from 'zod';

import { createPalette } from '@/styles/colors';
import { ChatPersistence, ChatPosition } from '@/types';

import { AnyExtension } from './Extension.dto';

const DEFAULT_AVATAR = 'https://cdn.voiceflow.com/assets/logo.png';

export enum InterfaceType {
  WIDGET = 'widget',
  POPOVER = 'popover',
  EMBED = 'embed',
}

export const InterfaceSettings = z
  .object({
    type: z.nativeEnum(InterfaceType).default(InterfaceType.WIDGET),
    position: z.nativeEnum(ChatPosition).default(ChatPosition.RIGHT),
    spacing: z
      .object({
        side: z.number().default(30),
        bottom: z.number().default(30),
      })
      .default({}),
    voiceInput: z.boolean().default(true),
    voiceOutput: z.boolean().default(true),
  })
  .default({});

export type PaletteSettings = z.infer<typeof PaletteSettings>;
export const PaletteSettings = z
  .object({
    50: z.string(),
    100: z.string(),
    200: z.string(),
    300: z.string(),
    400: z.string(),
    500: z.string(),
    600: z.string(),
    700: z.string(),
    800: z.string(),
    900: z.string(),
  })
  .default(createPalette());

// Appearance & style
export type AppearanceSettings = z.infer<typeof AppearanceSettings>;
export const AppearanceSettings = z
  .object({
    fontFamily: z.string().default('UCity Pro'),
    palette: PaletteSettings,
    headerImage: z
      .object({
        visible: z.boolean().default(true),
        image: z.string().default(DEFAULT_AVATAR),
      })
      .default({}),
    agentImage: z
      .object({
        enabled: z.boolean().default(true),
        image: z.string().default(DEFAULT_AVATAR),
      })
      .default({}),
    welcomeBanner: z
      .object({
        header: z.string().default('Your AI agent'),
        description: z.string().default('How can I help you today?'),
        image: z.string().default(DEFAULT_AVATAR),
      })
      .default({}),
    launcher: z
      .object({
        withLabel: z.boolean().default(false),
        image: z.string().default(DEFAULT_AVATAR),
      })
      .default({}),
    inputPlaceholder: z.string().default('Message...'),
    aiDisclaimer: z
      .object({
        enabled: z.boolean().default(true),
        text: z.string().default('Generated by AI, double-check for accuracy.'),
      })
      .default({}),
    footer: z
      .object({
        link: z
          .object({
            linkText: z.string().default('Privacy'),
            linkUrl: z.string().default(''),
          })
          .default({}),
        showPoweredBy: z.boolean().default(true),
      })
      .default({}),
  })
  .default({});

// Security
export type SecuritySettings = z.infer<typeof SecuritySettings>;
export const SecuritySettings = z
  .object({
    approvedDomains: z.string().optional(),
    agentDisclaimer: z
      .object({
        enabled: z.boolean().default(true),
        header: z.string().default('Privacy notice'),
        description: z
          .string()
          .default(
            'Before we can proceed with your conversation, we kindly ask you to review and accept our privacy policy, outlining how we handle and protect your personal information throughout our services.'
          ),
        primaryButtonText: z.string().default('Submit'),
        secondaryButtonText: z.string().default('Privacy policy'),
        secondaryButtonUrl: z.string().default(''),
      })
      .default({}),
  })
  .default({});

export type AssistantSettings = z.infer<typeof AssistantSettings>;
export type RawAssistantSettings = z.input<typeof AssistantSettings>;

export const AssistantSettings = z
  .object({
    interface: InterfaceSettings,
    appearance: AppearanceSettings,
    security: SecuritySettings,

    persistence: z.nativeEnum(ChatPersistence).default(ChatPersistence.LOCAL_STORAGE),
    extensions: AnyExtension.array().default([]),
  })
  .default({});
